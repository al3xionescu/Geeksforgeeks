/*
Given an array, print the Next Greater Element (NGE) for every element. The Next greater Element for an element x is the first greater 
element on the right side of x in array. Elements for which no greater element exist, consider next greater element as -1.

Method using Stack:
1) Push the first element to stack.
2) Pick rest of the elements one by one and follow following steps in loop.
….a) Mark the current element as next.
….b) If stack is not empty, then pop an element from stack and compare it with next.
….c) If next is greater than the popped element, then next is the next greater element for the popped element.
….d) Keep popping from the stack while the popped element is smaller than next. next becomes the next greater element for all such popped
elements
….g) If next is smaller than the popped element, then push the popped element back.
3) After the loop in step 2 is over, pop all the elements from stack and print -1 as next element for them.
*/

#include<bits/stdc++.h>
using namespace std;
 
void printNGE(int arr[], int n)
{
    stack<int> s;
 
    /* push the first element to stack */
    s.push(arr[0]);
 
    // iterate for rest of the elements
    for (int i=1; i<n; i++)
    {
        int next = arr[i];
 
        if (s.empty() == false)
        {
            // if stack is not empty, then
            // pop an element from stack
            int element = s.top();
            s.pop();
 
            /* If the popped element is smaller
               than next, then
               a) print the pair
               b) keep popping while elements are
               smaller and stack is not empty */
            while (element < next)
            {
                cout << element << " --> " << next
                     << endl;
                if (s.empty() == true)
                   break;
                element = s.top();
                s.pop();
            }
 
            /* If element is greater than next,
               then push the element back */
            if (element > next)
                s.push(element);
        }
 
        /* push next to stack so that we can find
           next greater for it */
        s.push(next);
    }
 
    /* After iterating over the loop, the remaining
       elements in stack do not have the next greater
       element, so print -1 for them */
    while (s.empty() == false)
    {
        cout << s.top() << " --> " << -1 << endl;
        s.pop();
    }
}
 
int main()
{
    int arr[] = {11, 13, 21, 3};
    int n = sizeof(arr)/sizeof(arr[0]);
    printNGE(arr, n);
    return 0;
}
