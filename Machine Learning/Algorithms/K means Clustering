/*We are given a data set of items, with certain features, and we want to categorize these items into groups. We will use for this 
kMeans algorithm. 
The algorithm works as follows:
   1. First we initialize k points, called means, randomly.
   2. We categorize each item to its closest mean and we update the mean’s coordinates, which are the averages of the items categorized in that mean so far.
   3. We repeat the process for a given number of iterations and at the end, we have our clusters. */

READ DATA

def ReadData(fileName):
   f = open(fileName, 'r')
   lines = f.read().splitlines();
   f.close();
   items = [];
   for i in range(1, len(lines)):
      line = lines[i].split(',');
      itemFeatures = [];
      for j in range(len(line)-1):
         v = float(line[j]);
         itemFeatures.append(v);
      items.append(itemFeatures);
   shuffle(items);
   return items;
   
INITIALIZE MEANS

We want to initialize each mean’s values in the range of the feature values of the items. For that, we need to find the min and max for
each feature. We accomplish that with the following function:

def FindColMinMax(items):
   n = len(items[0]);
   minima = [sys.maxint for i in range(n)];
   maxima = [-sys.maxint -1 for i in range(n)];
   for item in items:
      for f in range(len(item)):
         if(item[f]<minima[f]):
            minima[f]=item[f];
         if(item[f]>maxima[f]):
            maxima[f]=item[f];
return minima, maxima;

The variables minima, maxima are lists containing the min and max values of the items respectively. We initialize each mean’s feature 
values randomly between the corresponding minimum and maximum in those above two lists:

def InitializeMeans(items, k, cMin, cMax):
   f = len(items[0]);
   means = [[0 for i in range(f)] for j in range(k)];
   for mean in means:
      for i in range(len(mean)):
         mean[i] = uniform(cMin[i]+1, cMax[i]-1);
   return means;  
   
EUCLIDEAN DISTANCE 

def EuclideanDistance(x, y):
   S = 0;
   for i in range(len(x)):
      S += math.pow(x[i]-y[i], 2);
   return math.sqrt(S);
   
UPDATE MEANS

def UpdateMean(n,mean,item):
    for i in range(len(mean)):
        m = mean[i];
        m = (m*(n-1)+item[i])/float(n);
        mean[i] = round(m, 3);
    return mean;
    
CLASSIFY ITEMS

def Classify(means,item):
    # Classify item to the mean with minimum distance    
    minimum = sys.maxint;
    index = -1;
    for i in range(len(means)):
        # Find distance from item to mean
        dis = EuclideanDistance(item, means[i]);
        if (dis < minimum):
            minimum = dis;
            index = i;
    return index;
    
FIND MEANS

To actually find the means, we will loop through all the items, classify them to their nearest cluster and update the cluster’s mean. We will repeat the process for some fixed number of iterations. If between two iterations no item changes classification, we stop the process as the algorithm has found the optimal solution.

The below function takes as input k (the number of desired clusters), the items and the number of maximum iterations, and returns the means and the clusters. The classification of an item is stored in the array belongsTo and the number of items in a cluster is stored in clusterSizes.

def CalculateMeans(k,items,maxIterations=100000):
 
    # Find the minima and maxima for columns
    cMin, cMax = FindColMinMax(items);
     
    # Initialize means at random points
    means = InitializeMeans(items,k,cMin,cMax);
     
    # Initialize clusters, the array to hold
    # the number of items in a class
    clusterSizes= [0 for i in range(len(means))];
 
    # An array to hold the cluster an item is in
    belongsTo = [0 for i in range(len(items))];
 
    # Calculate means
    for e in range(maxIterations):
 
        # If no change of cluster occurs, halt
        noChange = True;
        for i in range(len(items)):
 
            item = items[i];
 
            # Classify item into a cluster and update the
            # corresponding means.        
            index = Classify(means,item);
 
            clusterSizes[index] += 1;
            cSize = clusterSizes[index];
            means[index] = UpdateMean(cSize,means[index],item);
 
            # Item changed cluster
            if(index != belongsTo[i]):
                noChange = False;
 
            belongsTo[i] = index;
 
        # Nothing changed, return
        if (noChange):
            break;
 
    return means;

FIND CLUSTERS

Finally we want to find the clusters, given the means. We will iterate through all the items and we will classify each item to its closest cluster.

def FindClusters(means,items):
    clusters = [[] for i in range(len(means))]; # Init clusters
     
    for item in items:
 
        # Classify item into a cluster
        index = Classify(means,item);
 
        # Add item to cluster
        clusters[index].append(item);
 
    return clusters;
   

      
